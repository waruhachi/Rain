function p(e){window.enmity.plugins.registerPlugin(e)}window.enmity.modules.common.Constants,window.enmity.modules.common.Clipboard,window.enmity.modules.common.Assets,window.enmity.modules.common.Messages,window.enmity.modules.common.Clyde,window.enmity.modules.common.Avatars,window.enmity.modules.common.Native;const i=window.enmity.modules.common.React;window.enmity.modules.common.Dispatcher,window.enmity.modules.common.Storage,window.enmity.modules.common.Toasts,window.enmity.modules.common.Dialog,window.enmity.modules.common.Token,window.enmity.modules.common.REST,window.enmity.modules.common.Settings,window.enmity.modules.common.Users,window.enmity.modules.common.Navigation,window.enmity.modules.common.NavigationNative,window.enmity.modules.common.NavigationStack,window.enmity.modules.common.Theme,window.enmity.modules.common.Linking,window.enmity.modules.common.StyleSheet,window.enmity.modules.common.ColorMap,window.enmity.modules.common.Components,window.enmity.modules.common.Locale,window.enmity.modules.common.Profiles,window.enmity.modules.common.Lodash,window.enmity.modules.common.Logger,window.enmity.modules.common.Flux,window.enmity.modules.common.SVG,window.enmity.modules.common.Scenes,window.enmity.modules.common.Moment;function t(...e){return window.enmity.modules.getByProps(...e)}window.enmity.modules.common;function y(e){return window.enmity.patcher.create(e)}var g="Rain",h="1.0.0",S="An Enmity plugin that adds Line sticker support.",F=[{name:"waruhachi",id:"247829475029549056"}],a={name:g,version:h,description:S,authors:F};const{components:o}=window.enmity;o.Alert,o.Button,o.FlatList,o.Image,o.ImageBackground,o.KeyboardAvoidingView,o.Modal,o.Pressable,o.RefreshControl,o.ScrollView,o.SectionList,o.StatusBar,o.StyleSheet,o.Switch,o.Text,o.TextInput,o.TouchableHighlight,o.TouchableOpacity,o.TouchableWithoutFeedback,o.Touchable,o.View,o.VirtualizedList,o.Form,o.FormArrow,o.FormCTA,o.FormCTAButton,o.FormCardSection,o.FormCheckbox,o.FormDivider,o.FormHint,o.FormIcon,o.FormInput,o.FormLabel,o.FormRadio;const v=o.FormRow;o.FormSection,o.FormSelect,o.FormSubLabel;const b=o.FormSwitch;o.FormTernaryCheckBox,o.FormText,o.FormTextColors,o.FormTextSizes;var T=({settings:e})=>i.createElement(v,{label:"Example Setting",trailing:i.createElement(b,{value:e.get("example",!0),onValueChange:()=>e.toggle("example",!0)})});const c=y(a.name),C=t("ScrollView").ScrollView;t("ScrollView").FlatList;const P=t("SegmentedControlItem").SegmentedControlItem,k={...a,onStart(){c.before(C,"render",(e,m,x)=>{var l,s,r;if(console.log(m),((s=(l=m==null?void 0:m[0])==null?void 0:l.children)==null?void 0:s.key)==="3"){const n=(r=m==null?void 0:m[0])==null?void 0:r.children.props.children,w=i.createElement(P,{style:{minWidth:"25%",marginStart:-4,marginEnd:4},index:3,key:"Rain",label:"Rain",state:n[1][2].props.state,pressed:n[1][2].props.pressed,selected:!1,onPress:n[1][2].props.onPress,onPressIn:n[1][2].props.onPressIn,onPressOut:n[1][2].props.onPressOut,icon:null,variant:"experimental_Small"}),u={...n[0].props.children[2],key:"Rain"};n[1].push(w),n[0].props.children.push(u),n[1].map(d=>{d.props.style.minWidth="25%",d.props.state.items=[{id:"Emoji",label:"Emoji",page:null},{id:"GIFs",label:"GIFs",page:null},{id:"Stickers",label:"Stickers",page:null},{id:"Rain",label:"Rain",page:null}]})}})},onStop(){c.unpatchAll()},getSettingsPanel({settings:e}){return i.createElement(T,{settings:e})}};p(k);
